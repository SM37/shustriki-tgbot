import sys
import logging
import asyncio

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import gspread
from oauth2client.service_account import ServiceAccountCredentials

from typing import List, Dict, Callable, Any

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from aiogram.exceptions import TelegramForbiddenError
from typing import Callable, Dict, Any

from config import BOT_TOKEN, CHANNEL_URLS, CHANNEL_IDS, SPREADSHEET_NAME

import asyncio
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram.types import Message

valid_subscriptions = ["1 –º–µ—Å—è—Ü", "3 –º–µ—Å—è—Ü–∞", "6 –º–µ—Å—è—Ü–µ–≤", "12 –º–µ—Å—è—Ü–µ–≤"]
user_applications = {}
user_app_index = {}

# –®–∞–≥–∏ –∞–Ω–∫–µ—Ç—ã
class Form(StatesGroup):
    city = State()
    district = State()
    parent_name = State()
    phone = State()
    dou = State()
    child_name = State()
    group = State()
    subscription = State()
    waiting_for_payment_check = State()
    waiting_for_payment_confirmation = State()
    waiting_for_app_number = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
user_data = {}
cities = ["–£—Ñ–∞", "–ù–µ—Ñ—Ç–µ–∫–∞–º—Å–∫", "–î—é—Ä—Ç—é–ª–∏", "–ê–≥–∏–¥–µ–ª—å", "–Ø–Ω–∞—É–ª", "–ê–º–∑—è", "–ù–∏–∫–æ–ª–æ-–ë–µ—Ä–µ–∑–æ–≤–∫–∞"]
ufa_districts = ["–õ–µ–Ω–∏–Ω—Å–∫–∏–π", "–ö–∏—Ä–æ–≤—Å–∫–∏–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π", "–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", "–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π", "–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", "–î–µ–º—Å–∫–∏–π"]
city_qr_codes = {
    "–£—Ñ–∞": {
        "default": "https://qr.nspk.ru/BS2A00125B2Q1QOD8OFRMANQ8D0IIP01?type=01&bank=100000000284&crc=3ACA",  # –î–ª—è –£—Ñ—ã
        "–õ–µ–Ω–∏–Ω—Å–∫–∏–π": "https://qr.nspk.ru/BS2A00125B2Q1QOD8OFRMANQ8D0IIP01?type=01&bank=100000000284&crc=3ACA",  # –î–ª—è –õ–µ–Ω–∏–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞
        "–ö–∏—Ä–æ–≤—Å–∫–∏–π": "https://qr.nspk.ru/BS2A00125B2Q1QOD8OFRMANQ8D0IIP01?type=01&bank=100000000284&crc=3ACA",  # –î–ª—è –ö–∏—Ä–æ–≤—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞
        # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –£—Ñ—ã —Å—é–¥–∞
    },
    "–ù–µ—Ñ—Ç–µ–∫–∞–º—Å–∫": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864",  # –î–ª—è –ù–µ—Ñ—Ç–µ–∫–∞–º—Å–∫–∞
    "–î—é—Ä—Ç—é–ª–∏": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864",  # –î–ª—è –î—é—Ä—Ç—é–ª–µ–π
    "–ê–≥–∏–¥–µ–ª—å": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864",  # –î–ª—è –ê–≥–∏–¥–µ–ª–∏
    "–Ø–Ω–∞—É–ª": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864",  # –î–ª—è –Ø–Ω–∞—É–ª–∞
    "–ê–º–∑—è": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864",  # –î–ª—è –ê–º–∑–∏
    "–ù–∏–∫–æ–ª–æ-–ë–µ—Ä–µ–∑–æ–≤–∫–∞": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864"  # –î–ª—è –ù–∏–∫–æ–ª–æ-–ë–µ—Ä–µ–∑–æ–≤–∫–∏
}

qr_links = {
    "–£—Ñ–∞": "https://qr.nspk.ru/BS2A00125B2Q1QOD8OFRMANQ8D0IIP01?type=01&bank=100000000284&crc=3ACA",
    "–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω": "https://qr.nspk.ru/BS2A0017PQ30HOEH8SFR2BFT8Q788VIO?type=01&bank=100000000284&crc=AC03",
    "–î—é—Ä—Ç—é–ª–∏": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864",
    "–ù–µ—Ñ—Ç–µ–∫–∞–º—Å–∫": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864",
    "–ê–≥–∏–¥–µ–ª—å": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864",
    "–Ø–Ω–∞—É–ª": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864",
    "–ê–º–∑—è": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864",
    "–ù–∏–∫–æ–ª–æ-–ë–µ—Ä–µ–∑–æ–≤–∫–∞": "https://qr.nspk.ru/AS2A006SOSPJL7PP9I1QQK8MEA7M6TOQ?type=01&bank=100000000284&crc=F864"
}

logging.basicConfig(level=logging.INFO)

class SubscriptionMiddleware(BaseMiddleware):
    def __init__(self, channel_ids: List[int], channel_urls: Dict[int, str]):
        self.channel_ids = channel_ids
        self.channel_urls = channel_urls
        super().__init__()

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Any],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        bot = data["bot"]
        user = data.get("event_from_user")

        if not user:
            return await handler(event, data)

        not_subscribed_channels = []

        for channel_id in self.channel_ids:
            try:
                member = await bot.get_chat_member(chat_id=channel_id, user_id=user.id)
                if member.status == "left":
                    not_subscribed_channels.append(channel_id)
            except TelegramForbiddenError:
                logging.warning(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª {channel_id} ‚Äî –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                continue
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")
                continue

        if not_subscribed_channels:
            buttons = [
                [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=self.channel_urls[channel_id])]
                for channel_id in not_subscribed_channels
            ]
            buttons.append([InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")])

            await bot.send_message(
                chat_id=user.id,
                text=(
                    "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                    "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ <b>üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>."
                ),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
                parse_mode="HTML"
            )
            return

        return await handler(event, data)

import asyncio
import logging
from aiogram.types import Message
import gspread
from oauth2client.service_account import ServiceAccountCredentials

async def connect_to_sheets(message: Message, creds_path: str, spreadsheet_id: str, sheet_name: str):
    loading_texts = [
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..",
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    ]

    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    loading_msg = await message.answer(loading_texts[0])
    animation_running = True
    previous_text = None

    # –ê–Ω–∏–º–∞—Ü–∏—è —Ç–æ—á–µ–∫
    async def animate_loading():
        nonlocal previous_text
        i = 0
        while animation_running:
            new_text = loading_texts[i % len(loading_texts)]
            if new_text != previous_text:
                try:
                    await loading_msg.edit_text(new_text)
                    previous_text = new_text
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ edit_text: {e}")
            await asyncio.sleep(2.5)  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞
            i += 1

    animation_task = asyncio.create_task(animate_loading())

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(creds_path, scope)
        client = gspread.authorize(creds)

        spreadsheet = client.open_by_key(spreadsheet_id)
        sheet = spreadsheet.worksheet(sheet_name)

    except Exception as e:
        animation_running = False
        await animation_task
        await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ.")
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

    animation_running = False
    await animation_task
    await loading_msg.delete()
    logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google –¢–∞–±–ª–∏—Ü–µ.")
    return sheet

async def send_main_menu(user_id: int, bot: Bot):
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üßæ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
            [KeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–∫–∏")],
            [KeyboardButton(text="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")],
            [KeyboardButton(text="‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")],
            [KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑")]
        ]
    )
    await bot.send_message(
        chat_id=user_id,
        text="–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –®—É—Å—Ç—Ä–∏–∫, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ üêø\n\n–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "check_subscription")
async def check_subscription_again(callback: CallbackQuery, bot: Bot, state: FSMContext):
    not_subscribed_channels = []

    for channel_id in CHANNEL_IDS:
        try:
            member = await bot.get_chat_member(chat_id=channel_id, user_id=callback.from_user.id)
            if member.status == "left":
                not_subscribed_channels.append(channel_id)
        except TelegramForbiddenError:
            logging.warning(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª {channel_id} ‚Äî –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")

    if not_subscribed_channels:
        buttons = [
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_URLS[channel_id])]
            for channel_id in not_subscribed_channels
        ]
        buttons.append([InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")])

        await callback.message.edit_text(
            "‚ùó –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        return

    await state.clear()
    await callback.message.delete()
    await send_main_menu(callback.from_user.id, bot)

def get_user_rows(sheet, user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Telegram user_id"""
    all_rows = sheet.get_all_records()
    return [row for row in all_rows if str(row.get("user_id")) == str(user_id)]


def get_row_by_number(sheet, number):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏"""
    all_rows = sheet.get_all_records()
    for row in all_rows:
        if str(row.get("application_number")) == str(number):
            return row
    return None

def get_next_application_number(sheet):
    values = sheet.get_all_values()
    
    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏), –Ω–∞—á–∏–Ω–∞–µ–º —Å 1
    if len(values) <= 1:
        return 1  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–∏–Ω–¥–µ–∫—Å 1)
    application_numbers = [int(row[1]) for row in values[1:] if row[1].isdigit()]
    
    if not application_numbers:
        return 1  # –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ + 1
    return max(application_numbers) + 1

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    await send_main_menu(message.from_user.id, bot)

@dp.message(Form.city, F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu_from_city(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üßæ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
            [KeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–∫–∏")],
            [KeyboardButton(text="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")],
            [KeyboardButton(text="‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")],
            [KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑")]
        ]
    )
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

@dp.message(F.text == "üßæ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def start_questionnaire(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[[KeyboardButton(text=city)] for city in cities] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=keyboard)
    await state.set_state(Form.city)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@dp.message(Form.city)
async def process_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if city not in cities:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(city=city)

    if city == "–£—Ñ–∞":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –£—Ñ—ã
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text=d)] for d in ufa_districts])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:", reply_markup=keyboard)
        await state.set_state(Form.district)
    else:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞
        await state.update_data(district="‚Äî")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.parent_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
@dp.message(Form.district)
async def process_district(message: types.Message, state: FSMContext):
    district = message.text.strip()
    if district not in ufa_districts:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(district=district)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.parent_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è
@dp.message(Form.parent_name)
async def process_parent_name(message: types.Message, state: FSMContext):
    await state.update_data(parent_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.phone)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –î–û–£:")
    await state.set_state(Form.dou)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –î–û–£
@dp.message(Form.dou)
async def process_dou(message: types.Message, state: FSMContext):
    await state.update_data(dou=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–µ–±—ë–Ω–∫–∞:")
    await state.set_state(Form.child_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û —Ä–µ–±—ë–Ω–∫–∞
@dp.message(Form.child_name)
async def process_child_name(message: types.Message, state: FSMContext):
    await state.update_data(child_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–ª–∞–¥—à–∞—è', '–°—Ä–µ–¥–Ω—è—è'):")
    await state.set_state(Form.group)

@dp.message(Form.group)
async def process_group(message: types.Message, state: FSMContext):
    group = message.text.strip()
    await state.update_data(group=group)

    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="1 –º–µ—Å—è—Ü"), KeyboardButton(text="3 –º–µ—Å—è—Ü–∞")],
            [KeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤"), KeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)
    await state.set_state(Form.subscription)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(Form.subscription)
async def process_subscription(message: types.Message, state: FSMContext):
    subscription = message.text.strip()
    valid_options = ["1 –º–µ—Å—è—Ü", "3 –º–µ—Å—è—Ü–∞", "6 –º–µ—Å—è—Ü–µ–≤", "12 –º–µ—Å—è—Ü–µ–≤"]

    keyboard1 = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="1 –º–µ—Å—è—Ü"), KeyboardButton(text="3 –º–µ—Å—è—Ü–∞")],
            [KeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤"), KeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤")]
        ]
    )
    
    if subscription not in valid_options:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", reply_markup= keyboard1)
        return

    await state.update_data(subscription=subscription)

    data = await state.get_data()
    if not data:
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
    sheet = await connect_to_sheets(
    message,
    "empirical-axon-458108-g5-5b5dc8bbf1b7.json",
    "1J6Mu0nR_mqlWQ1DVmql5WDHzNFZg_7nssWqVFk7ITX4",  # <-- –≤–æ—Ç ID —Ç–∞–±–ª–∏—Ü—ã
    SPREADSHEET_NAME
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
    application_number = get_next_application_number(sheet)
    await state.update_data(application_number=application_number)

    # –°–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    row = [
        str(message.from_user.id),
        data.get("application_number", ""),    
        data.get("city", ""),                  
        data.get("district", "-"),             
        data.get("parent_name", ""),           
        data.get("phone", ""),                 
        data.get("dou", ""),                   
        data.get("child_name", ""),            
        data.get("group", ""),                 
        data.get("subscription", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"),
        "False"                                
    ]

    sheet.append_row(row)

    await state.clear()
    
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ä–µ–±—ë–Ω–∫–∞")],
            [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
    )

    await message.answer(
    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{application_number} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
    "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ä–µ–±—ë–Ω–∫–∞, –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
)
    await message.answer(
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏.",
        reply_markup=keyboard
    )
# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ ---

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ä–µ–±—ë–Ω–∫–∞")
async def add_another_child(message: types.Message, state: FSMContext):
    await state.clear()
    await start_questionnaire(message, state)

subscription_prices = {
    "1 –º–µ—Å—è—Ü": 150,
    "3 –º–µ—Å—è—Ü–∞": 375,
    "6 –º–µ—Å—è—Ü–µ–≤": 750,
    "12 –º–µ—Å—è—Ü–µ–≤": 1125
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É
async def get_application_by_number(number, message: types.message):
    sheet = await connect_to_sheets(
    message,
    "empirical-axon-458108-g5-5b5dc8bbf1b7.json",
    "1J6Mu0nR_mqlWQ1DVmql5WDHzNFZg_7nssWqVFk7ITX4",  # <-- –≤–æ—Ç ID —Ç–∞–±–ª–∏—Ü—ã
    SPREADSHEET_NAME
    )
    
    records = sheet.get_all_records()
    for row in records:
        if str(row.get("–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", "")).strip() == str(number).strip():
            return row
    return None

# 1Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑"
@dp.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑")
async def oplata(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å:")
    await state.set_state(Form.waiting_for_payment_check)

# 2Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏ –ø–æ–∫–∞–∑ –¥–∞–Ω–Ω—ã—Ö + QR
@dp.message(Form.waiting_for_payment_check)
async def process_payment_request(message: types.Message, state: FSMContext):
    try:
        request_number = message.text.strip()
        request = await get_application_by_number(request_number, message)  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        if not request:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        city = request.get("–ì–æ—Ä–æ–¥", "")
        district = request.get("–†–∞–π–æ–Ω", "‚Äî")
        subscription = request.get("–ü–æ–¥–ø–∏—Å–∫–∞", "")
        price = str(request.get("–°—É–º–º–∞", "")).strip()

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if not price and subscription in subscription_prices:
            price = subscription_prices[subscription]

        if not price:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Å—ã–ª–∫—É
        if city == "–£—Ñ–∞" and district == "–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω":
            qr_url = qr_links.get("–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω")
        else:
            qr_url = qr_links.get(city, qr_links["–î—é—Ä—Ç—é–ª–∏"])  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏

        # –ö–Ω–æ–ø–∫–∏: –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ –∏ –Ø –æ–ø–ª–∞—Ç–∏–ª
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=qr_url)],
                [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_payment:{request_number}")]
            ]
        )

        text = (
            f"üìÑ –ó–∞—è–≤–∫–∞ ‚Ññ{request_number}\n"
            f"üåç –ì–æ—Ä–æ–¥: {city}\n"
            f"üèò –†–∞–π–æ–Ω: {district}\n"
            f"üì¶ –ü–æ–¥–ø–∏—Å–∫–∞: {subscription}\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price} —Ä—É–±.\n\n"
            f"üîΩ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'."
        )

        await message.answer(text, reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(application_number=request_number)
        await state.set_state(Form.waiting_for_payment_confirmation)

    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")
        print(e)

# 3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data.startswith("confirm_payment:"))
async def handle_confirm_payment_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏"

    application_number = callback.data.split(":")[1]

    sheet = await connect_to_sheets(
        callback.message,
        "empirical-axon-458108-g5-5b5dc8bbf1b7.json",
        "1J6Mu0nR_mqlWQ1DVmql5WDHzNFZg_7nssWqVFk7ITX4",
        SPREADSHEET_NAME
    )
    if not sheet:
        await callback.message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    records = sheet.get_all_records()
    for row in records:
        if str(row.get("–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", "")).strip() == application_number:
            status = str(row.get("–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", "")).strip().lower()
            if status == "true":
                await callback.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{application_number} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
            else:
                await callback.message.answer(f"‚è≥ –û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{application_number} –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            break
    else:
        await callback.message.answer("‚ùó –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä.")

    await state.clear()


# --- –ú–æ–∏ –∑–∞—è–≤–∫–∏ ---

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets ---
def get_user_applications(user_id: str, sheet):
    records = sheet.get_all_records()
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ user_id
    apps = [row for row in records if str(row.get("user_id")) == str(user_id)]
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫ –ø–µ—Ä–≤—ã–º (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–µ–º—É)
    apps.sort(key=lambda r: int(r.get("–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", 0)), reverse=True)
    return apps

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏" ---
@dp.message(F.text == "üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def handle_my_applications(message: types.Message):
    sheet = await connect_to_sheets(
    message,
    "empirical-axon-458108-g5-5b5dc8bbf1b7.json",
    "1J6Mu0nR_mqlWQ1DVmql5WDHzNFZg_7nssWqVFk7ITX4",  # <-- –≤–æ—Ç ID —Ç–∞–±–ª–∏—Ü—ã
    SPREADSHEET_NAME
    )
    if sheet is None:
        return

    user_id = str(message.from_user.id)
    apps = get_user_applications(user_id, sheet)

    if not apps:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return

    user_applications[user_id] = apps
    user_app_index[user_id] = 0
    await send_application(message, user_id)

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ ---
async def send_application(message_or_callback, user_id: str):
    apps = user_applications.get(user_id, [])
    index = user_app_index.get(user_id, 0)

    if not apps or index >= len(apps):
        await message_or_callback.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–∞—è–≤–∫—É.")
        return

    app = apps[index]
    status = str(app.get("–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", "")).strip().lower()
    status_text = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if status == "true" else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"

    text = (
        f"üìÑ –ó–∞—è–≤–∫–∞ ‚Ññ{app.get('–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏')}\n\n"
        f"üèô –ì–æ—Ä–æ–¥: {app.get('–ì–æ—Ä–æ–¥')}\n"
        f"üìç –†–∞–π–æ–Ω: {app.get('–†–∞–π–æ–Ω')}\n"
        f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {app.get('–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app.get('–¢–µ–ª–µ—Ñ–æ–Ω')}\n"
        f"üè´ –î–û–£: {app.get('–î–û–£')}\n"
        f"üßí –†–µ–±—ë–Ω–æ–∫: {app.get('–§–ò–û —Ä–µ–±–µ–Ω–∫–∞')}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {app.get('–ì—Ä—É–ø–ø–∞')}\n"
        f"üõí –ü–æ–¥–ø–∏—Å–∫–∞: {app.get('–ü–æ–¥–ø–∏—Å–∫–∞')}\n"
        f"üíµ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {status_text}"
    )

    nav_buttons = []
    if index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="prev_app"))
    if index < len(apps) - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_app"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[nav_buttons]) if nav_buttons else None
    await message_or_callback.answer(text, reply_markup=keyboard)

# --- –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞ ---
@dp.callback_query(F.data == "next_app")
async def next_application(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    if user_app_index.get(user_id, 0) < len(user_applications.get(user_id, [])) - 1:
        user_app_index[user_id] += 1
    else:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞.")
        return
    await update_application(callback)

# --- –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—è–≤–∫–∞ ---
@dp.callback_query(F.data == "prev_app")
async def prev_application(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    if user_app_index.get(user_id, 0) > 0:
        user_app_index[user_id] -= 1
    else:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞.")
        return
    await update_application(callback)

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏ ---
async def update_application(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    apps = user_applications.get(user_id, [])
    index = user_app_index.get(user_id, 0)

    if not apps or index >= len(apps):
        await callback.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–∞—è–≤–∫—É.")
        return

    app = apps[index]
    status = str(app.get("–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", "")).strip().lower()
    status_text = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if status == "true" else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"

    text = (
        f"üìÑ –ó–∞—è–≤–∫–∞ ‚Ññ{app.get('–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏')}\n\n"
        f"üèô –ì–æ—Ä–æ–¥: {app.get('–ì–æ—Ä–æ–¥')}\n"
        f"üìç –†–∞–π–æ–Ω: {app.get('–†–∞–π–æ–Ω')}\n"
        f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {app.get('–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app.get('–¢–µ–ª–µ—Ñ–æ–Ω')}\n"
        f"üè´ –î–û–£: {app.get('–î–û–£')}\n"
        f"üßí –†–µ–±—ë–Ω–æ–∫: {app.get('–§–ò–û —Ä–µ–±–µ–Ω–∫–∞')}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {app.get('–ì—Ä—É–ø–ø–∞')}\n"
        f"üõí –ü–æ–¥–ø–∏—Å–∫–∞: {app.get('–ü–æ–¥–ø–∏—Å–∫–∞')}\n"
        f"üíµ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {status_text}"
    )

    nav_buttons = []
    if index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="prev_app"))
    if index < len(apps) - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_app"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[nav_buttons]) if nav_buttons else None
    await callback.message.edit_text(text, reply_markup=keyboard)

# --- –ü–æ–¥–∞—Ä–∫–∏, FAQ, –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ---

@dp.message(F.text == "üéÅ –ü–æ–¥–∞—Ä–∫–∏")
async def gifts(message: types.Message):
    await message.answer(
        "üéÅ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∞–∫—Ü–∏—è–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏!"
    )

@dp.message(F.text == "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def faq(message: types.Message):
    await message.answer(
        "‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:\n\n"
        "1. –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "2. –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ.\n\n"
        "3. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫?\n"
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∞–∫—Ü–∏—è–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏!\n\n"
        "4. –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏?\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'."
    )

@dp.message(F.text == "‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback(message: types.Message):
    text = (
        "üìû <b>–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—á–∞—Å—Ç–∏—é –≤ –ø—Ä–æ–µ–∫—Ç–µ <b>¬´–®—É—Å—Ç—Ä–∏–∫–∏¬ª</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ WhatsApp.\n"
        "–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ ‚Äî –ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –≤ Telegram.\n\n"
        "üí¨ <b>WhatsApp (–ø–æ –ø—Ä–æ–µ–∫—Ç—É ¬´–®—É—Å—Ç—Ä–∏–∫–∏¬ª):</b>\n"
        "<a href='https://wa.me/79968831020'>+7 996 883-10-20</a>\n\n"
        "üì® <b>Telegram (–ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞):</b>\n"
        "<a href='https://t.me/Heimdall_SM'>@Heimdall_SM</a>\n\n"
        "‚åõÔ∏è –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôå"
    )
    await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)


@dp.message(F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message, state: FSMContext, bot: Bot):
    user_data.pop(message.from_user.id, None)  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await cmd_start(message, state, bot)  # –ü–µ—Ä–µ–¥–∞–µ–º bot

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

if __name__ == "__main__":
    dp.message.middleware(SubscriptionMiddleware(CHANNEL_IDS, CHANNEL_URLS))
    asyncio.run(dp.start_polling(bot))
